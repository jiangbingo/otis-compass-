#include <lpc12xx.h>
#include <lpc12xx_gpio.h>
#include "XY_Key_Scan_Def.h"
#include "XY_Key_Scan_Func.h"

#include "../uart/uart0.h"

volatile uint8_t c_KeyChanged;
volatile uint8_t c_InputValue[N_SCAN_ROWS];		
static uint8_t c_InputLast[N_SCAN_ROWS];
static uint8_t c_InputCurrent[N_SCAN_ROWS];

//键盘扫描初始化
void KeyScanInit(void)
{
	uint8_t i;
	c_KeyChanged = 0;
	KEY_SCAN_SET_PIN_DIR;
	for(i=0; i<N_SCAN_ROWS; i++)
	{
		c_InputValue[i] = 0x07;
		c_InputLast[i] = 0x07;
		c_InputCurrent[i] = 0x07;
	}
}

//键盘扫描函数
void XY_Key_Scan(void)
{
	uint8_t i;

	KEY_SCAN_SET_ROW1;
	c_InputCurrent[0] = KEY_SCAN_GET_COLS;
	KEY_SCAN_SET_ROW2;
	c_InputCurrent[1] = KEY_SCAN_GET_COLS;
	KEY_SCAN_SET_ROW3;
	c_InputCurrent[2] = KEY_SCAN_GET_COLS;
	KEY_SCAN_SET_ROW4;
	c_InputCurrent[3] = KEY_SCAN_GET_COLS;

	for(i=0;i<N_SCAN_ROWS;i++)
	{
		if(ClearShakeDo(&c_InputValue[i], &c_InputLast[i], c_InputCurrent[i]))
		{
			c_KeyChanged = 1;  
		}
	}
}

//消抖函数
uint8_t ClearShakeDo(uint8_t *cValue, uint8_t *cLast, uint8_t cCurrent)
{
	uint8_t cKeyAND,cKeyOR,cKeyChange,cKeyValue;

	cKeyAND = cCurrent & *cLast;	//求与中间值
	cKeyOR = cCurrent | *cLast;	//求或中间值
	cKeyValue = (*cValue | cKeyAND) & cKeyOR;	//新的按键值
	cKeyChange = *cValue ^ cKeyValue;	//按键变更值

	*cLast = cCurrent;	//保存新状态
	*cValue = cKeyValue;	//保存新值

	return	cKeyChange;	//返回
}
